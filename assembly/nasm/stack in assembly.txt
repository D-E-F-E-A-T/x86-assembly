How stack works in assembly?
----------------------------
Each routine uses a portion of the stack, and we call it a stack frame. Although an assembler programmer is not forced to follow the following style, it is highly recommended as good practice.

The stack frame for each routine is divided into three parts: function parameters, back-pointer to the previous stack frame, and local variables.



why do we stack
----------------
Temporary save area for registers
To save return address for CALL
To pass arguments
Local variables
Applications which have LIFO nature nature, such as reversing a string


Part 1: Function Parameters
---------------------------
This part of a routine's stack frame is set up by the caller. Using the 'push' instruction, the caller pushes the parameters onto the stack. Different languages may push the parameters on in different orders. C, if I remember correctly, pushes them on right to left. That is, if you are calling ...

foo (a, b, c);
The caller will convert this to ...

push c
push b
push a
call foo
As each item is pushed onto the stack, the stack grows down. That is, the stack-pointer register is decremented by four (4) bytes (in 32-bit mode), and the item is copied to the memory location pointed to by the stack-pointer register. Note that the 'call' instruction will implicitly push the return address on the stack. Cleanup of the parameters will be addressed in Part 5.



Part 2: Stackframe back pointer
-------------------------------

At this point in time, the 'call' instruction has been issued and we are now at the start of the called routine. If we want to access our parameters, we can access them like ...

[esp + 0]   - return address
[esp + 4]   - parameter 'a'
[esp + 8]   - parameter 'b'
[esp + 12]  - parameter 'c'
However, this can get clumsy after we carve out space for local variables and stuff. So, we use a stackbase-pointer register in addition to the stack-pointer register. However, we want the stackbase-pointer register to be set to our current frame, and not the previous function. Thus, we save the old one on the stack (which modifies the offsets of the parameters on the stack) and then copy the current stack-pointer register to the stackbase-pointer register.

push ebp        ; save previous stackbase-pointer register
mov  ebp, esp   ; ebp = esp
Sometimes you may see this done using only the 'ENTER' instruction.



Part 3: Carving space for local variables
-----------------------------------------

Local variables get stored on the stack. Since the stack grows down, we subtract some # of bytes (enough to store our local variables):

sub esp, n_bytes ; n_bytes = number of bytes required for local variables.



Part 4: Putting it all together. Parameters are accessed using the stackbase-pointer register ...
-------------------------------------------------------------------------------------------------

[ebp + 16]  - parameter 'c'
[ebp + 12]  - parameter 'b'
[ebp + 8]   - parameter 'a'
[ebp + 4]   - return address
[ebp + 0]   - saved stackbase-pointer register
Local variables are accessed using the stack-pointer register ...

[esp + (# - 4)] - top of local variables section
[esp + 0]       - bottom of local variables section


Part 5: Stackframe cleanup
--------------------------

When we leave the routine the stack frame must be cleaned up.

mov esp, ebp   ; undo the carving of space for the local variables
pop ebp        ; restore the previous stackbase-pointer register
Sometimes you may see the 'LEAVE' instruction replacing those two instructions.

Depending upon the language you were using you may see one of the two forms of the 'RET' instruction.

ret
ret <some #>
Whichever is chosen will depend upon the choice of language (or style you wish to follow if writing in assembler). The first case indicates that the caller is responsible for removing the parameters from the stack (with the foo(a,b,c) example it will do so via ... add esp, 12) and it is the way 'C' does it. The second case indicates that the return instruction will pop # words (or # bytes, I can't remember which) off the stack when it returns, thus removing the parameters from the stack. If I remember correctly, this is style used by Pascal.

It's long, but I hope this helps you better understand stackframes.

_________________________________________________________________________________________________________________________________________________________________

stack
-----

stack is data structure.
stack is a way to organize the data in RAM.
it is organized in the manner that LIFO.

LIFO - last in first out

consider the stack of plates. the last plate we put on the stack is taken first.

                        -----  5th plate - it is going to be taken first
                        -----  4th plate - it is going to be taken second
                        -----  3rd plate - it is going to be taken third
                        -----  2nd plate - it is going to be taken fourth
                        -----  1st plate - it is going to be taken fifth.
                     .----------.
                     |..........|


stack is controlled using ESP and EBP.

ESP - Extended Stack Pointer
EBP - Extended Base Pointer



caller saved registers and callee saved registers
-------------------------------------------------

as we know CPU register holds some data and it is getting changed when CPU instructions are executed.
so we have to save the values of the registers we want preserve in stack before calling another procedure ( function or method ). because if we 
dont't save the values of registers , then the function we are going to call will change the values in registers while executing CPU instructions.





there is some conventions in saving values of registers in stack. the convention can vary from one compiler to another compiler.

callee saver registers means , the caller can expect the values in particular registers after the execution of the callee , becoz callee will save
the values and give it back to us when it finished it's execution.
but it won't save all the registers value , it will save particular registers according to the conventions.
the registers the callee won't save have to be saved before calling callee if we want the register data. 
if we don't want the value , then we need not to change it.


in cdecl calling convention ,        EAX , ECX , EDX   are  caller saved.  it is also called as GCC calling conventions. 

ESI EDI EBX EBP are calle saved. 

other registers value will be preserved by callee function and it will be given back to us when the callee finished it's execution. it will not save
EAX , ECX and EDX. so when we return from callee the EAX ,ECX and EDX values will be changed , and other registers value's will be unchanged.


caller saver registers  - registers saved by caller function

callee saver registers  - registers saved by callee function


STACK POINTER - points to the top of the stack
BASE  POINTER - points to the base address of a stack frame


caller:
-------
push caller saver registers
push parameters
push return address
make EIP pointing to the starting address of callee function.

callee:
-------
push old base pointer - ebp
push callee saver registers
push local variables.
....
....
ret.



stack grows downwards. up -> downs
----------------------------------

ESP always points to the top of the stack.

so when we want create stack space , we have to  decrement ESP.

lets consider ESP - 1000

if want to create four bytes of memory in stack , we have to reduce 4 in ESP.

ESP-4 will allocate 4 bytes of memory for our program.

_____________________________________________________________________________________________________________________________________________________________

four instructions that affects the value of ESP
-----------------------------------------------

CALL
----
call instruction pushes the offset of the next instruction to the stack. it is also called as return address.
and it copies the address of the function it's going to call , to EIP.

how does the CALL instuction works?
-----------------------------------
it does two stuffs.

* it pushes the return address to the stack. so when RET works , it pops it to the EIP
* it copies starting address of the function to the EIP. so the function will start executing.

EIP - it holds the address of the next instruction to be executed. so the the function is called.

______________________________________________________________________________________________________________________________________________

RET    
---
RET instruction is used to return from the function we called lastly.

types
-----
retn - return near
retf - return far

It's actually two types: retn and retf. The third one ret is coded by the assembler into one of the first two.

The difference is that retn (return near) will pop the instruction pointer (IP) only.
While the retf (return far) will pop both the instruction pointer (IP) and the code segment (CS).

On Windows you only have a single code segment, and thus ret should just be a mnemonic for retn.

Separate retn and retf instructions are a throwback to older days when segmented memory models were common.

ret n
-----
this instruction will clear n bytes of parameter given to the function


how does the RET instruction works?
-----------------------------------
the RET instruction simply pop the top of the stack to EIP. As EIP is pointing to address of the next instruction and it's going to run the instruction
at that address.
_______________________________________________________________________________________________________________________________________________________

PUSH
----
PUSH instruction decrements the ESP and copies the value of register or immediate to stack.

_________________________________________________________

POP
---

POP instruction increments the ESP and copies the value to register or to a memory location

________________________________________________________

ENTER and LEAVE instruction
---------------------------

ENTER: Create Stack Frame
LEAVE: destroys stack frame

ENTER:
------
ENTER IMM IMM

 The first operand  gives the amount of stack space to allocate for local variables;
 the second operand gives the nesting level of the procedure (for languages like Pascal, with nested procedures).

          PUSH EBP              ; saves old ebp
          MOV EBP,ESP           ; creates new ebp
          SUB ESP,operand1      ; creates stack space for local variables


LEAVE:
------
LEAVE destroys a stack frame of the form created by the ENTER instruction

          MOV ESP,EBP           ; cleares the local variables
          POP EBP               ; restores the old EBP

______________________________________________________________________________________________________________________________________________________________

-----------------------
environmental variables  - env[0] , env[1] , env[2] , env[3] , env[4]
-----------------------
command line arguments   - arg[0] , arg[1] , arg[2] , arg[3] , arg[4]
-----------------------

_______________________________________________________________________________________________________________________________________________________________

stack in real life 
-------------------

   |0x40053a <main>         push   rbp                                                                                            
   │0x40053b <main+1>       mov    rbp,rsp                                                                                        
   │0x40053e <main+4>       sub    rsp,0x20                                                                                       
   │0x400542 <main+8>       mov    DWORD PTR [rbp-0x14],edi                                                                       
   │0x400545 <main+11>      mov    QWORD PTR [rbp-0x20],rsi                                                                       
   │0x400549 <main+15>      mov    DWORD PTR [rbp-0xc],0xa                                                                        
   │0x400550 <main+22>      mov    DWORD PTR [rbp-0x8],0x14                                                                       
   │0x400557 <main+29>      mov    edx,DWORD PTR [rbp-0x8]                                                                        
   │0x40055a <main+32>      mov    eax,DWORD PTR [rbp-0xc] 


0x7fffffffdcf0:	0xffffddf8	0x00007fff	0x00400430	0x00000001
0x7fffffffdd00:	0xffffddf0	0x0000000a	0x00000014	0x00000000
0x7fffffffdd10:	0x00400590	0x00000000

rbp            0x7fffffffdd10
rsp            0x7fffffffdcf0


0x7fffffffdd17:	0x00
0x7fffffffdd16:	0x00
0x7fffffffdd15:	0x00
0x7fffffffdd14:	0x00
0x7fffffffdd13:	0x00
0x7fffffffdd12:	0x40
0x7fffffffdd11:	0x05
0x7fffffffdd10:	0x90  rbp

0x7fffffffdd0f:	0x00  rbp -1
0x7fffffffdd0e:	0x00  rpb -2
0x7fffffffdd0d:	0x00  rbp -3
0x7fffffffdd0c:	0x00  rpb -4

0x7fffffffdd0b:	0x00  rbp -5
0x7fffffffdd0a:	0x00  rbp -6
0x7fffffffdd09:	0x00  rbp -7
0x7fffffffdd08:	0x14  rbp -8  -->    mov    DWORD PTR [rbp-0x8], 0x14 

0x7fffffffdd07:	0x00  rbp -9
0x7fffffffdd06:	0x00  rbp -10
0x7fffffffdd05:	0x00  rbp -11     
0x7fffffffdd04:	0x0a  rbp -12  -->   mov    DWORD PTR [rbp-0xc],  0xa

0x7fffffffdd03:	0xff  rbp -13
0x7fffffffdd02:	0xff  rbp -14
0x7fffffffdd01:	0xdd  rbp -15
0x7fffffffdd00:	0xf0  rbp -16

0x7fffffffdcff:	0x00  rbp -17
0x7fffffffdcfe:	0x00  rbp -18
0x7fffffffdcfd:	0x00  rbp -19
0x7fffffffdcfc:	0x01  rbp -

0x7fffffffdcfb:	0x00  rbp -21
0x7fffffffdcfa:	0x40  rbp -22
0x7fffffffdcf9:	0x04  rbp -23
0x7fffffffdcf8:	0x30  rbp -24  -->    mov    DWORD PTR [rbp-0x14],  edi 

0x7fffffffdcf7:	0x00  rbp -25
0x7fffffffdcf6:	0x00  rbp -26
0x7fffffffdcf5:	0x7f  rbp -27
0x7fffffffdcf4:	0xff  rbp -28
0x7fffffffdcf3:	0xff  rbp -29
0x7fffffffdcf2:	0xff  rbp -30
0x7fffffffdcf1:	0xdd  rbp -31
0x7fffffffdcf0:	0xf8  rbp -32  -->    mov    QWORD PTR [rbp-0x20],  rsi


DATA in stack is stored in LITTLE ENDIAN ORDER and filled down to the up.

push 0x12345678

address | data |
--------|-------
 100    |   12 |
 99     |   34 |
 98     |   56 |
 97     |   78 |
----------------

to store data in stack we have to specify the address where the LSB is going to store. that means where the low address

to retrive the data , we have to specify the address where LSB of the data is stored.

push 1 --> takes 4 bytes in 32 bit OS -- 0x 00 00 00 01
push 1 --> takes 8 bytes in 64 bit OS -- 0x 00 00 00 00 00 00 00 01

pop eax , pop ax --> valid in 32 bit mode
pop rax , pop ax --> valid in 64 bit mode

push eax , push ax --> valid in 32 bit mode
push rax , push ax --> valid in 64 bit mode

PUSH decreases the ESP
POP increases the ESP

_________________________________________________________________________________________________________________________________

     push 0x1234

     mov ebp ,esp

     push 0x1234

                        STACK

           +-------------------------------+       |
           |                               |       |
           +-------------------------------+       |
           |                               |       |
           +-------------------------------+       |
0xffffd46e |                               |       |
           +-------------------------------+       |
0xffffd46d |                               |       |
           +-------------------------------+       v
0xffffd46c |                               |
           +-------------------------------+      
0xffffd46b |               00              |                     
           +-------------------------------+
0xffffd46a |               00              |
           +-------------------------------+
0xffffd469 |               12              |
           +-------------------------------+
0xffffd468 |               34              | EBP - BASE POINTER
           +-------------------------------+
0xffffd467 |               00              | EBP - 1
           +-------------------------------+
0xffffd466 |               00              | EBP - 2
           +-------------------------------+
0xffffd465 |               12              | EBP - 3
           +-------------------------------+
0xffffd464 |               34              | ESP - STACK POINTER
           +-------------------------------+
           |                               |
           +-------------------------------+
           |                               |
           +-------------------------------+
           |                               |
           +-------------------------------+
           |                               |
           +-------------------------------+
           |                               |
           +-------------------------------+

__________________________________________________________________________________________________________________________________________________________________

saving values temporarily
-------------------------

     mov eax, 1
     mov ebx, 2
     mov ecx, 3
    
    ;pushing values to stack
                                  STACK
    push eax                     -------
    push ebx                     | eax |
    push ecx                     -------
                                 | ebx |
    add eax, ebx                 -------
    add ecx, eax                 | ecx |
                                 -------
    ;popping values to stack

    pop ecx
    pop ebx
    pop eax
______________________________________________________________

storing loop conters in stack
-----------------------------          
                                           STACK
first:                                    -------
    call A                                |     |
    push ecx                              -------
    mov ecx,3                             | ecx | --> counter for first loop  [ 0x100 ]
second:                                   -------
     call B                               | ecx | --> counter for second loop [ 0x96 ]
     push ecx                             ------- 
     mov ecx,3                            |     |
third:                                    -------
     call C
     loop third
    
     pop ecx
     loop second
     
     pop ecx
     loop first
________________________________________________________________

reversing a string
------------------

   xor ecx,ecx                    
    xor esi,esi
    xor eax,eax
    mov esi,0
    mov ecx,5                     STACK
                                  -----
pushToStack:                      | h | 
   mov eax, [msg+esi]             -----
   push eax                       | e |
   inc esi                        -----
   loop pushToStack               | l |
                                  -----
xor eax,eax                       | l |
xor ecx,ecx                       -----
mov ecx,5                         | o |  --> Top of the stack
                                  -----
reverse:
   pop eax
   PRINT_CHAR eax
   loop reverse
_______________________________________________________________

function which takes parameters from registers and stores the result in registers
---------------------------------------------------------------------------------

section .data
array dd 0x00000001,0x00000002,0x00000003,0x00000004,0x00000005   ; dd-define double word

section .text
global CMAIN
CMAIN:
mov ebp, esp  ;for correct debugging
xor ecx,ecx
xor esi,esi
xor eax,eax

;parameters on stack
mov ecx,dword 5     ; function parameter for number of elements
mov esi,array       ;fuction parameter for offset of the array

call sumFunction

jmp quit
  
sumFunction:
add eax, [esi]  ; add values and store it in eax
add esi,4       ; get the next four bytes
loop sumFunction ; execute loop 5 times , decreases ecx by one
ret

quit:
PRINT_DEC 4 ,EAX
mov eax,0
int 0x80
___________________________________________________________________________

function which takes parameters from stack and stores the result in registers
-----------------------------------------------------------------------------

section .text
global CMAIN
CMAIN:

; for correct debugging

    mov ebp, esp


;clearing registers

 xor eax,eax
 xor ebx,ebx
 xor ecx,ecx
 xor edx,edx
 


 ;pushing parameters to stack

 push 5
 push 6
 call sumFunction
 PRINT_DEC 4,eax
 call quit
 


 ;function which takes parameter from stack

 sumFunction:
 push ebp
 mov ebp,esp
 add eax,[ebp+8]     ; argument 6
 add eax,[ebp+12]    ; argument 5
 pop ebp
 ret
 
 quit:
 mov eax,0
 int 0x80



It is call by value

+-------------------+
|        5          |  push 5
+-------------------+----------------------------------------------------------->  ebp + 12
|        6          |  push 6
+-------------------+------------------------------------------------------------> ebp + 8
|  return address   |  call sumFunction --> pushes the return address
+-------------------+------------------------------------------------------------> ebp + 4
|       ebp         |  push ebp --> saving old base pointer
+-------------------+
________________________________________________________________________________________________________________

factorial using stack
---------------------

 mov ebp, esp; for correct debugging                                +---------------+
 push 5                                                             |       5       |
 call factorial                                                     +---------------+
 PRINT_DEC 4,eax                                                    |return address |
                                                                    +---------------+
factorial:                                                          |     ebp       |
push ebp                                                            +---------------+
mo^ ebp,esp                                                         |      4        |
mov eax,[ebp+8]                                                     +---------------+
                                                                    |return address |
cmp eax,0                                                           +---------------+
ja continue                                                         |     ebp       |
                                                                    +---------------+
mov eax,1                                                           |      3        |
jmp finish                                                          +---------------+
                                                                    |return address |
continue:                                                           +---------------+
dec eax                                                             |      ebp      |
push eax        ; Factorial(n-1)                                    +---------------+
call factorial                                                      |      2        |
                                                                    +---------------+
ReturnFact:                                                         |return address |
mov ebx,[ebp+8] ; get n                                             +---------------+
mul ebx         ; edx:eax=eax*ebx                                   |      ebp      |
                                                                    +---------------+
finish:                                                             |     1         |
pop ebp ; return EAX                                                +---------------+
ret 4   ; clean up stack                                            |return address |
                                                                    +---------------+
quit:                                                               |     ebp       |
mov eax,0                                                           +---------------+
int 0x80                                                            |      0        |
                                                                    +---------------+
                                                                    |return address |
                                                                    +---------------+
                                                                    |     ebp       |
                                                                    +---------------+
____________________________________________________________________________

parameters:
-----------
we can store parameters in cpu registers or in stack






