+-----------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|                                       NASM                                                    |                                            GAS                                                     |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| ; to create a comment                                                                         | # to create a comment                                                                              |
|                                                                                               | // it also supports c type comments                                                                |
|                                                                                               |/* it is also a c type comment */                                                                   |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| registers are used by their name eax,ebx,ecx,edx,esi,edi                                      | register names must have  % sign before it , %eax, %ebx , %ecx , %edx , %esi , %edit               |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| immediate operands are normal literals                                                        |  immediate operands must have $ sign prefix                                                        |
|                                                                                               |                                                                                                    |
|    push 5                                                                                     |  push $5                                                                                           |
|    push 0x678                                                                                 |  push $0x12345                                                                                     |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|  Intel syntax accomplishes this by prefixing memory operands (not the opcodes themselves)     | size of the operands are determined by last character of the opcode name                           |
|  with byte ptr, word ptr, dword ptr and qword ptr                                             | movb al , bl  --> moves one byte data of al to bl                                                  |
|                                                                                               |                                                                                                    |
|    byte 8 bits              mov al , byte ptr [varaibe_name]                                  |  b   byte 8 bits                                                                                   |
|    word 16 bits                                                                               |  w   word 16 bits                                                                                  |
|    dword 32 bits                                                                              |  l   long 32 bits                                                                                  |
|    qword 64 bits                                                                              |  q   quad 64 bits                                                                                  |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| assembler directives in nasm don't have any special syntax. they just begins  with their name.|   assembler directives in GAS begin with a "."                                                     |
|                                                                                               |                                                                                                    |
| section .text                                                                                 |   .section .text                                                                                   |
| section .data                                                                                 |   .section .bss                                                                                    |
| section .bss                                                                                  |   .section .data                                                                                   |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|On the NASM side of Listing 1, global _start marks the symbol _start as a visible identifier   | The global (also .globl or .global in GAS) keyword is used to make a symbol visible to the linker  |
|so the linker knows where to jump into the program and begin execution.                        | and available to other object modules.                                                             |
|                                                                                               |                                                                                                    |
|                    As with NASM, GAS looks for this _start label as the default entry point of a program. A label always ends with a colon in both GAS and NASM.                                   |
+-----------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
| var1 db 0x12                                                                                  | var1: .byte 0x12                                                                                   |
| var2 dw 0x1234                                                                                | var2: .int  0x1234                                                                                 |
| var3 dd 0x12345678                                                                            | var3: .long 0x12345678                                                                             |
| var4 dq 0x1234567890000000                                                                    | var4: .quad 0x1234567890000000                                                                     |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| [ ] = square brackets for dereferencing memory address                                        |  ( ) = circular braces for dereferencing memory address                                            |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| var1 resb 1                                                                                   | .lcomm var1 1                                                                                      |
| var2 resw 1                                                                                   | .lcomm var2 2                                                                                      |
| var3 resd 1                                                                                   | .lcomm var3 4                                                                                      |
| var4 resq 1                                                                                   | .lcomm var4 8                                                                                      |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| location counter:                                                                             | location counter:                                                                                  |
|                                                                                               |                                                                                                    |
| msg db 'hello'                                                                                | msg_start:                                                                                         |
| len EQU $-msg                                                                                 | .ascii "hello"                                                                                     |
|                                                                                               | msg_end:                                                                                           |
|                                                                                               |                                                                                                    |
|                                                                                               | .set len, msg_end+msg_start                                                                        |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|macro:                                                                                         | macro:                                                                                             |
|                                                                                               |                                                                                                    |
|%beginmacro macroname 2                                                                        | .macro macroname arg1, arg2                                                                        |
|moV eax, %1                                                                                    | moVl \arg1, %eax                                                                                   |
|mov ebx, %2                                                                                    | movl \arg2, %ebx                                                                                   |
|%endmacro                                                                                      | .endm                                                                                              |
+---------------+-------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+
|         [ ebp + 8 ]                                                                           |              8 ( ebp )                                                                             |
|                                                                                               |                                                                                                    |
|         [ ebp - 4 ]                                                                           |             -4 ( ebp )                                                                             |
+-----------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------+                                                                                                                                                                                                  |

section:   [base + index*scale + disp]
section:    disp(base, index, scale)

+------------------------------+------------------------------------+
| Intel Code 				   |             AT&T Code              |
+------------------------------+------------------------------------+
| mov eax,1                    | movl $1,%eax                       |
+------------------------------+------------------------------------+
| mov ebx,0ffh                 | movl $0xff,%ebx                    |
+------------------------------+------------------------------------+
| int 80h                      | int $0x80                          |
+------------------------------+------------------------------------+
| mov ebx, eax                 | movl %eax, %ebx                    |
+------------------------------+------------------------------------+
| mov eax,[ecx]                | movl (%ecx),%eax                   |
+------------------------------+------------------------------------+
| mov eax,[ebx+3]              | movl 3(%ebx),%eax                  |
+------------------------------+------------------------------------+
| mov eax,[ebx+20h]            | movl 0x20(%ebx),%eax               |
+------------------------------+------------------------------------+
| add eax,[ebx+ecx*2h]         | addl (%ebx,%ecx,0x2),%eax          |
+------------------------------+------------------------------------+
| lea eax,[ebx+ecx]            | leal (%ebx,%ecx),%eax              |
+------------------------------+------------------------------------+
| sub eax,[ebx+ecx*4h-20h]     | subl -0x20(%ebx,%ecx,0x4),%eax     |
+------------------------------+------------------------------------+

gas accessing variables:
------------------------
num: .long 0x00000000

movl $0x1 , num        ; num = 1
movl num , %eax        ; eax = num
movl $num , %eax       ; eax = &num

