codes
------

code is group of symbols



different types of codes
-------------------------

weighted codes
--------------
in weighted code each position of number represents specific weight.

binary code
8421
2421
number systems  decimal hexadecimal octal



non-weighted codes
-------------------
non-weighted codes have no positional weight

XS-3 code
gray code


reflective codes
----------------
it is also known as self complementing code

9 - complement of 0
8 - complement of 1
7 - complement of 2

2421
XS-3

demo:

decimal    2421 code
 0          0000         complement of 9
 1          0001         complement of 8
 2          0010         complement of 7
 3          0011         complement of 6
 4          0100         complement of 5
 5          1011         complement of 4
 6          1100         complement of 3
 7          1101         complement of 2
 8          1110         complement of 1
 9          1111         complement of 0


sequential code
---------------
each succeeding code is one binary number greater than preceeding code

8421
XS-3


alphanumeric code
-----------------
we can represent numbers characters symbols

ASCII - american standard code for information interchange


error detecting & correcting codes
----------------------------------
this is used to detect the error and correct it

hamming code






BCD - Binary Coded Decimal
--------------------------

it is also called as 8421 code
it is weight coded , each position has some weight
all the decimal numbers are represented by 4 bit binary numbers


           
decimal                8 4 2 1
-------------------------------
0                      0 0 0 0
1                      0 0 0 1
2                      0 0 1 0
3                      0 0 1 1
4                      0 1 0 0
5                      0 1 0 1
6                      0 1 1 0
7                      0 1 1 1
8                      1 0 0 0
9                      1 0 0 1
10                           invalid
11                           invalid
12                           invalid

how get BCD for two digit decimal number

10                     0001 0000
11                     0001 0001

923                    1001 0010 0011

35                     0011 0101        in binary      0010 0011

2479                   0010 0100 0111 1001


BCD addition
------------

we have three posibilities

sum<=9 final carry 0      --> correct answer
sum<=9 finaly carry 1     --> incorrect answer  add 6
sum>9 final carry 0       --> incorrect answer  add 6


sum<= 9   final carry=0
-----------------------

2 + 6
         11
         0010
         0110
        ------
         1000     - right answer




sum> 9  final carry=0
-----------------------

3 + 7              
       1 1 1
       0 0 1 1
       0 1 1 1
       -------
       1 0 1 0   - 10 error: so we have to add 6
       --------

we can represent 16 combinations using 4 bits    0-15
but we are only representing 10 combinations     0-9

so we have invalid 6 combinations

      1  0  1  0
      0  1  1  0  +6
  ----------------
   1  0  0  0  0     -->  0001  0000  -> 10  now the answer is correct!
  ----------------





sum<=9  final carry is 1
------------------------

  8+9

    1 0 0 0
    1 0 0 1
   ---------
  1 0 0 0 1    error: we have to add 6
  ----------


  1 0 0 0 1
    0 1 1 0
------------
  1 0 1 1 1  -->  0001 0111  --> 17
------------






57+26

          0101 0111
          0010 0110
        ------------
          0111 1101      --> 7 13     answer is incorrect  add 6  

                      0111 1101
                      0000 0110
                     ------------
                      1000 0011    --> 8 3
                     ------------ 



______________________________________________________________________________________________________________________________________________________________

in programming input and output are done using ascii.

input is given as ASCII text

input is converted to binary for calculations

result is converted into ASCII for output

ouput is given as ASCII text



instead of converting ascii to binary for calculations , we directly do arithmetics in ASCII

-------------------------------------------------------
ASCII-CHAR      ASCII-VALUE-IN-DECIMAL        HEX     |   
-------------------------------------------------------
    0                48                       30      |
-------------------------------------------------------
    1                49                       31      |
-------------------------------------------------------
    2                50                       32      |
-------------------------------------------------------
    3                51                       33      |
-------------------------------------------------------
    4                52                       34      |
-------------------------------------------------------
    5                53                       35      |
-------------------------------------------------------
    6                54                       36      |
-------------------------------------------------------
    7                55                       37      |
-------------------------------------------------------
    8                56                       38      |
-------------------------------------------------------
    9                57                       39      |
-------------------------------------------------------
 
_____________________________________________________________________________________________________________________________________________________________


aaa - ascii adjust after addition
---------------------------------


 problem1                             problem2
 --------                             --------


 34H = 00110100B  52  '4'             36H = 00110110B  54  '6'
 35H = 00110101B  53  '5'             37H = 00110111B  55  '7'
 -------------------------------------------------------------
 69H = 01101001B  105  9              6DH = 01101101B 109  13
 -------------------------------------------------------------


 we have added the ascii values without converting it into binary values.

 the answer we have got here is not ascii values.so we have to convert it into ascii values.

 so we use aaa instruction

 aaa- ascii adjust after addition

 
 aaa-working
 -----------

 if( low_NIBBLE_of_AL > 9 || AF==1 )
 {

   AH = AH+1;

   add 6 to AL;

   CF=1;

   AF=1;

   clear msb four bits of AH;

 }

 else
 {
   clear msb four bits of AH;
 }


_______________________________________________________

in problem 1  the result is 0110 1001     ( low_NIBBLE_of_AL <=9    AF=0) so nothing to change.
we just clear four MSB and it becomes 0000 1001

________________________________________________________


in problem 2  the result is 0110 1101     ( low_NIBBLE_of_AL > 9   AF=0)  so we have to add 1 to AH and 6 to AL and clear MSB four bits of AL

0000 0000  0110 1101
---------  ---------       
 AH          AL

 adding 1 to AH


0000 0001  0110 1101
---------  ---------       
 AH          AL


adding 6 to AL

0110 1101
0000 0110
---------
0111 0011
---------

0000 0001  0111 0011
---------  ---------       
 AH          AL


clearing MSB four bits of AL

0000 0001  0000 0011
---------  ---------       
 AH          AL

______________________________________________________________________


problem 1:
----------

 0000 0000     0000 1001
 -----------------------
 AH              AL



we use OR instruction to make the value of AL to corresponding ASCII value

OR AL , 30H

 0000 1001
 0011 0000
 ---------
 0011 1001  - 57 - 39H - '9'
 ---------



problem 2:
----------

OR AL , 3030H

0000 0001  0000 0011
0011 0000  0011 0000
--------------------
0011 0001  0011 0011  -  49,51     -    '1','3'
--------------------

________________________________________________________________________________________________________________________________________________________

aas working
------------

adjust after subraction
if the result is positive we don't need to do anything

if the result is negative we have to do some adjustments.


when result is positive
-----------------------

9-3 subracting

39H  0011 1001   57  '9'
33H  0011 0011   51  '3'
-----------------------
06H  0000 0110   6  
-----------------------

above examble works fine. we don't need to do anything , we just have to convert it to ASCII

OR AL , 30H

 0000 0110
 0011 0000
 ---------
 0011 0110 36H ->  54 in decimal
 ----------

__________________________________________________________________________

when result is negative
-----------------------

3-9 subracting

33H  0011 0011   51  '3'
39H  0011 1001   57  '9'
-------------------------
FAH  1111 1010   -6
-------------------------

If the least significant four bits in AL are > 9  or
if AF =1, it subtracts 6 from AL and 1 from AH


least significant four bits  of AL = 1010 > 9

so we have subract 6 from AL and 1 from AH


1111 1010
0000 0110
----------
1111 0100
----------

AH = 0000 0000 we are goint subract 1 from AH

0000 0000   0
0000 0001   1
---------
1111 1111  -1
---------

1111 1111  1111 0100

msb four bits of AL is cleared

1111 1111 0000 0100


AL = 0000 0100

we have convert it to ASCII by OR 30H

 OR AL , 30H



 0000 0100
 0011 0000
 ----------
 0011 0100  34H ->  54
 ----------

_____________________________________________________________________________________________________________________________________________________
 
aam - ascii adjust after multiplication
---------------------------------------


multiplication should not be performed on ASCII.
multiplication should be performed on unpacked BCD.



how to convert ASCII to unpacked BCD

AND AL , 0FH




3*9                  9     *     3

                0000 1001  *  0000 0011
              --------------------------
                            00001001
                           00001001
                          00000000
                         00000000
                        00000000
                       00000000
                      00000000
                     00000000
              -------------------------
                               11011     - 27
              -------------------------



AL = 0001 1011

AAM - divides the AL by 10

quotient is stored in AH , remainder is stored in AL

   2 - stored in AH
10|27 |
   20
   --
    7 - stored in AL


AH = 02
AL = 07

__________________________________________________________________________________________________________________________________________________________

aad - ascii adjust after division
---------------------------------

AAD is performed before division.

we can't perform division in ASCII. we have to convert them to  unpacked BCD.


The aad instruction adjusts the numerator in AX before dividing two unpacked decimal numbers.

dividend is stored in AX. dividend can be of 2 byte

divisor can be of 1 byte.


if the divisor and dividend is in ASCII we have to convert them to unpacked bcd


28 - dividend
 7 - divisor

28 in ascii 3238H
 7 in ascii   37H

AX contains 3238H
CL contains   37H


AND AX , 0F0FH    ;   AX becomes 0208H

AND CL , 0FH      ;   CL becomes 07H

ADD        ; 


ADD - multiply AH * 10 and add the product to the AL
      anc clear AH


AX =  0000 0010   0000 1000
      ---------------------
        AH           AL 


we are going to multiply AH*10

0000 0010 = 2 
 
0000 0010 * 10 =   2 * 10   =  0000 0010 * 0000 1010 =  0001 0100 = 20


adding the product of AH*10 to AL

0000 1000
0001 0100
---------
0001 1100 = 28
---------


DIV CL

remainder is stored in AH quotient is stored in AL

AH = 0000  0000  = 0
AL = 0000  1000  = 0

when we divide 28/7 = 4
_______________________________________________________________________________________________________________________________________________________________




