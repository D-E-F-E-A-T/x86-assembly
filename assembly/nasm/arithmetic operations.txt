lets take a 4 bit computer

so we can represent 16 combinations.

-------------.------------------.
unsigned     |     signed       |
-------------|-------------------
             |                  |
0000  = 0    |      0000  = 0   |                
0001  = 1    |      0001  = 1   |
0010  = 2    |      0010  = 2   |
0011  = 3    |      0011  = 3   |
0100  = 4    |      0100  = 4   |
0101  = 5    |      0101  = 5   |
0110  = 6    |      0110  = 6   |
0111  = 7    |      0111  = 7   |
             |                  |
1000  = 8    |      1000  = -8  |
1001  = 9    |      1001  = -7  |
1010  = 10   |      1010  = -6  |
1011  = 11   |      1011  = -5  |
1100  = 12   |      1100  = -4  |
1101  = 13   |      1101  = -3  |
1110  = 14   |      1110  = -2  |
1111  = 15   |      1111  = -1  |
---------------------------------

in unsigned arithmetic we use all combinations to represent unsigned numbers. 

in our case we use these 16 combinations to represent 0-15 positive integers.


in signed arithmetic we use half combinations for positive integers and another  half for negative integers. 

we use first 8 combinations to represent positive integers 0-7  and another 8 combinations to represent 8 negative integers -8 to -1


unsigned arithmetic
-------------------

case 1:  adding two numbers that results with in a range    14+1
--------------------------------------------------------

1110  -  14  +
0001  -  1
----
1111  -  15

CF=0
OF=0


case 2: adding two numbers that results above the range  14+2
-------------------------------------------------------
  11
  1110 - 14 +
  0010 - 2
 -----
1 0000 - 0 ERROR!

CF=1  because carry occurs out of most significant bit
OF=0



case 3: subracting big number from small number 14-2
-----------------------------------------------

  1110 - 14
  0010 -  2
  ----
  1100 - 12

 CF=0
 OF=0



case 4: subracting small from big number  2-14
----------------------------------------
    1
   10 10
    0 0 1 0  -  2
    1 1 1 0  -  14
  -----------
    0 1 0 0  -  4  ERROR!
  -----------

CF=1 because borrow occures for most significant bit
OF=0

______________________________________________________________________________________________________________________________________

signed arithmetic
-----------------

case 1: adding two negative numbers that comes under the maximum range -1 + -2  = -3
----------------------------------------------------------------------

 1111 = -1  
 1110 = -2
 ----------
 1101 = -3
 ----------
 
 CF=0
 OF=0


case 2: adding two negative numbers that goes above the maximum range  -8 + -1 = -9
----------------------------------------------------------------------
 
   1000 = -8
   1111 = -1
 ----------
 1 0111 = 7 ERROR!
 -----------

 CF=1 because carry occures out of most significant bit
 OF=1 because we add two negative number and get positive number


case 3: adding two positive numbers that goes out of the maximum range   7+1
-----------------------------------------------------------------------

   0111 = 7
   0001 = 1
 -----------
   1000 = -8 ERROR!
 ----------

 CF=0 
 OF=1 because we add two positive numbers and get a negative result


case 4: adding two positive numbers that with in the range   6+1
----------------------------------------------------------------

    0110 = 6
    0001 = 1
   -----------
    0111 = 7 
   -----------

 CF=0
 OF=0


case 5: adding a positive and negative number   -8+1
-----------------------------------------------------
   
    1000 = -8
    0001 = +1
   -----------
    1001 = -7
   -----------

  CF=0
  OF=0


7+(-1) another exambler

  0111 = 7
  1111 = -1
------------
1 0110 = 6
------------

CF=0
OF=0
____________________________________________________________________________________________________________________________________________

multiplication
--------------

x86 has two instruction for multiplication.

one for signed numbers another one for unsigned numbers.

unsigned numbers we use MUL instruction
  signed numbers we use IMUL instruction


unsigned multiplication - MUL 
-----------------------------

in multiplication there is multiplicand and multiplier.

multiplicand should be in EAX or AX or AH or AL

because MUL instruction assumes that multiplicand is stored in EAX register.

we can't use immediate values in MUL instruction. the data can be in register or in memory (RAM)

we can multiply two 8 bit values
we can multiply two 16 bit values
we can multiply two 32 bit values
we can multiply two 64 bit values

but we can't multiply 8 bit value to 16 bit value
                      32 bit value to 8 bit value
                      16 bit value to 32 bit value


size    multiplicand    multiplier  result
---------------------------------------------
Byte           AL          r/m8     AX
Word           AX          r/m16    DX:AX
Doubleword     EAX         r/m32    EDX:EAX
Quadword       RAX         r/m64    RDX:RAX




signed multiplication - IMUL
----------------------------

 This instruction has three forms, depending on the number of operands.

 When an immediate value is used as an operand, it is sign-extended to the length of the destination operand format.
 

 
IMUL r/m8*                            AX ←       AL * r/m byte.

IMUL r/m16                            DX:AX ←    AX * r/m word

IMUL r/m32                            EDX:EAX ←  EAX * r/m32

IMUL r/m64                            RDX:RAX ←  RAX * r/m64

IMUL r16, r/m16                       word register ←  word register * r/m16.

IMUL r32, r/m32                       doubleword register ←  doubleword register * r/m32

IMUL r64, r/m64                       Quadword register ←   Quadword register * r/m64

IMUL r16, r/m16, imm8                 word register ←   r/m16 * sign-extended immediate byte.

IMUL r32, r/m32, imm8                 doubleword register ←   r/m32 * sign-extended immediate byte

IMUL r64, r/m64, imm8                 Quadword register ←   r/m64 * sign-extended immediate byte.

IMUL r16, r/m16, imm16                word register ←   r/m16 * immediate word

IMUL r32, r/m32, imm32                doubleword register ←   r/m32 * immediate doubleword

IMUL r64, r/m64, imm32                Quadword register ←   r/m64 * immediate doubleword

________________________________________________________________________________________________________________________________________________________________

divition
-------- 

unsigned divition - div
-----------------------

in divition , there are four things to remember.    

dividend
divisor
quotient
remainder

dividend is stored in AX , DX:AX , EDX:EAX , RDX:RAX  deponds upon the size.

divisor is stored in any register r8 , r16 , r32 , r64


DIV r/m8                  Unsigned divide AX by r/m8, with result stored in AL ← Quotient, AH ← Remainder

DIV r/m16                 Unsigned divide DX:AX by r/m16, with result stored in AX ← Quotient, DX ← Remainder

DIV r/m32                 Unsigned divide EDX:EAX by r/m32, with result stored in EAX ← Quotient, EDX ← Remainder

DIV r/m64                 Unsigned divide RDX:RAX by r/m64, with result stored in RAX ← Quotient, RDX ← Remainder


signed divition - idiv
----------------------

mostly same as div


_________________________________________________________________________________________________________________________________________________________________

maximum limits of arithmeitc instruction on x86
-----------------------------------------------

addition
--------

we can't add different size data . we can add two 8 bit , 16 bit , 32 bit or 64 bit values. 
we can't add 8 bit with 16 bit or 16 bit 32 bit values. so we have sign extend the values we are adding to the same size.

add eax , bx  ; it is wrong operand type

ADD r32, r/m32

mov eax , 0xFFFF FFFF       1111 1111 1111 1111 1111 1111 1111 1111
mov ebx , 0x0000 0000       0000 0000 0000 0000 0000 0000 0000 0001
add eax , ebx          0001 0000 0000 0000 0000 0000 0000 0000 0000

eax register can only hold 32 bits , so the result of the above addition will be 0 , because we can't hold 33 bits. the last one bit makes a carry

so the biggest addition result can be 0xFFFFFFFF   ( 4,294,967,296-1 ) 




subraction
----------

we can't subract size data. we can subract two 8 bits , 16 bit , 32 bit or 64 bit values.
we can't subract 8 bit value from 16 bit or 16 bit value from 8 bit value.


sub eax , bx  ; it is wrong operand type 


SUB r32, r/m32

in 32 bit registers we can have  4,294,967,296 combinations. so in unsigned arithmetic the result of a subraction can be  4,294,967,294.

it can'b be  4,294,967,295 , becasue  0- 4,294,967,295 causes error! so atleast  4,294,967,295-1 =  4,294,967,294.


as we can able to have 4,294,967,296 combinations , in signed arithmeitc we use half of them to represent unsigned numbers and another
half to represent signed numbers.

4,294,967,296 / 2 = 2147483648.  


0 - 2147483647  = first 2147483648 combinations.  upto 0111 1111  1111  1111  15  1111  1111  1111  1111

-2147483648 to -1 = second 2147483649 - 4,294,967,296


so in 32 bit computer , we can have 0-2147483647 positive numbers and -1 to -2147483648 negative numbers



multiplication
--------------

there are two instructions for multiplication. signed and unsigned multiplication.

for unsigned  multiplication - MUL is used
for   signed  multiplication - IMUL is used.

MUL
---

in mul instruction we have multiplicand in eax reigster. we only pass multiplier as operand in mul instruction.
we have to careful about mul operand , becasue if we use mul bx ,then the data in ax is taken as multiplicand.
                                               if we use mul ebx , then the data in eax is taken as multiplicand.
                                               if we use mul bl , then the data in el is taken as  multiplicand.

also we can't use immediate values as operands in multiplication.

mov eax , 10
mov bx , 2
mul bx         ; it will assume that multiplicand is in ax register and only will take 16 bits as multiplicand. so if you have 32 bit value as 
                 multiplicand and use mul bx then 16 bits only fetched from eax register.


maximum result of multiplication should be 2^64 -1 (18,446,744,073,709,551,615).  MUL r/m32 because EDX:EAX ← EAX ∗ r/m32


IMUL
----

IMUL have three forms. one operand - same as mul operand - one operand is assumed to be in eax register
                       two operand - can't use immediate values 
                                     values must be same size.
                                     result is stored in destination register
                     three operand - result is stored in first operand.
                                     we can use immediate values.


example - single operand
-------
         xor eax , eax    ;clearing eax register
         xor ebx , ebx    ;clearing ebx register
         mov al , 10
         mov bl , 2
         imul bl        ; ax = al * bl


example - double operand
-------
       xor eax , eax  
       xor ebx , ebx  
       mov ax , 10
       mov bx , 10 
       imul ax , bx


example - thrible operand
-------
          xor eax , eax  
          xor ebx , ebx  
          mov bx , 10 
          imul ax , bx , 10


division
--------

dividend must be twice as divisor

           dividend                divisor

AX, DX:AX, EDX:EAX, or RDX:RAX - 8bit 16bit 32bit 64bit
______________________________________________________________________________________________________________________________________________________