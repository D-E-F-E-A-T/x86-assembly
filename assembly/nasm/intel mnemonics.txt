intel mnemonics
---------------

3.1.1.1 Opcode Column in the Instruction Summary Table (Instructions without VEX Prefix)

                               +--------------+--------+-------------+-----+--------------+----------+
                               |  prefix|byte | opcode | mod|reg|r\m | sib | displacement | immediate|
                               +---------------------------------------------------------------------+
                               |      4       |   2    |     1       |  1  |     4        |   4      |
                               +------+-------+----+---+-------+-----+--+--+-----+--------+----+-----+



REX.W — Indicates the use of a REX prefix that affects operand size or instruction semantics.
 The ordering of the REX prefix and other optional/mandatory instruction prefixes are discussed Chapter
 2. Note that REX prefixes that promote legacy instructions to 64-bit behavior are not listed explicitly in the opcode column.

• /digit — A digit between 0 and 7 indicates that the ModR/M byte of the instruction uses only the r/m (register or memory) operand.
  The reg field contains the digit that provides an extension to the instruction's opcode.

• /r — Indicates that the ModR/M byte of the instruction contains a register operand and an r/m operand.

• cb, cw, cd, cp, co, ct — A 1-byte (cb), 2-byte (cw), 4-byte (cd), 6-byte (cp), 8-byte (co) or 10-byte (ct) value
following the opcode. 
This value is used to specify a code offset and possibly a new value for the code segment register.

• ib, iw, id, io — A 1-byte (ib), 2-byte (iw), 4-byte (id) or 8-byte (io) immediate operand to the instruction that
follows the opcode, ModR/M bytes or scale-indexing bytes. The opcode determines if the operand is a signed
value. All words, doublewords and quadwords are given with the low-order byte first.

• +rb, +rw, +rd, +ro — Indicated the lower 3 bits of the opcode byte is used to encode the register operand
without a modR/M byte. The instruction lists the corresponding hexadecimal value of the opcode byte with low
3 bits as 000b. In non-64-bit mode, a register code, from 0 through 7, is added to the hexadecimal value of the
opcode byte. In 64-bit mode, indicates the four bit field of REX.b and opcode[2:0] field encodes the register
operand of the instruction. “+ro” is applicable only in 64-bit mode. See Table 3-1 for the codes.

• +i — A number used in floating-point instructions when one of the operands is ST(i) from the FPU register stack.
The number i (which can range from 0 to 7) is added to the hexadecimal byte given at the left of the plus sign
to form a single opcode byte.


summary:

/digit -  in ModR/m byte ( mod-reg-reg/m)  reg/m only contains the operand. 
                                           reg  contains opcode extension.

/r     -  in ModR/m byte ( mod-reg-reg/m)  reg/m and reg both contains operand.

ib,iw,id,io - immediate byte , immediate word , immediate double word , immediate octa word

+rb , +rw , +rd , +ro - opcode itself has the operand (register) in itself. 


refer 3.1.1.3   --->    64-ia-32-architectures-software-developer-vol-2a-manual

_________________________________________________________________________________________________________________________________

• imm8 — An immediate byte value. The imm8 symbol is a signed number between –128 and +127 inclusive.
For instructions in which imm8 is combined with a word or doubleword operand, the immediate value is sign-
extended to form a word or doubleword. The upper byte of the word is filled with the topmost bit of the
immediate value.

• imm16 — An immediate word value used for instructions whose operand-size attribute is 16 bits. This is a
number between –32,768 and +32,767 inclusive.

• imm32 — An immediate doubleword value used for instructions whose operand-size attribute is 32
bits. It allows the use of a number between +2,147,483,647 and –2,147,483,648 inclusive.

• imm64 — An immediate quadword value used for instructions whose operand-size attribute is 64 bits.
The value allows the use of a number between +9,223,372,036,854,775,807 and –
9,223,372,036,854,775,808 inclusive.

_____________________________________________________________________________________