logical shift
-------------
* it is straight forward simple type of shift
* it will only work on unsigned numbers
* incoming bytes are always '0'
* The number of positions to shift can either be a constant or can be stored in the CL register
* Shift instructions are very basic and are much faster than the corresponding MUL and DIV instructions!

types
-----
1. Shift left
2. Shift right

THE LAST BIT SHIFTED IS STORED IN CARRY FLAG.


Shift left
----------
* it is for multiplication

xor eax,eax
mov  al,0x02
shl  al,1


value << number_of_shits  =  value * ( 2^ number_of_shits )   

 2 << 1 = 2 * ( 2 ^ 2)
        = 2 * 4
        = 8

 16 << 2 = 16 * ( 2 ^ 2)
         = 16 * (4)
         = 64


 when we are shifting the value 1 bit left its value get doubled.

 once the bit we move gets MSB position , if we left shift we will lose MSB . 
 the LSB is positions value will be 1 , 2 , 4 , 8 , 16 , 32 , 64 , 128

 
 if the value is maximum of it's bit capacity , if we left shift , the value will get reduced every time.


         LEFT SHIFTING - value increases                                                      LEFT SHIFTING - value decreases

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  0  |  0   |  0  |  1   |  0   |  --> before shifting --> 2      |  1   |  1  |  1  |  1  |  1   |  1  |  1   |  1   |   before shifting --> 255
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  0  |  0   |  1  |  0   |  0   |  --> after shifting --> 4       |  1   |  1  |  1  |  1  |  1   |  1  |  1   |  0   |  after shifting --> 254      1 is reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  0  |  1   |  0  |  0   |  0   |  --> after shifting --> 8       |  1   |  1  |  1  |  1  |  1   |  1  |  0   |  0   |  after shifting --> 252       2 is reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  1  |  0   |  0  |  0   |  0   |  --> after shifting --> 16      |  1   |  1  |  1  |  1  |  1   |  0  |  0   |  0   |  after shifting --> 248       4 is reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  1  |  0  |  0   |  0  |  0   |  0   |  --> after shifting --> 32      |  1   |  1  |  1  |  1  |  0   |  0  |  0   |  0   |  after shifting --> 240       8 is reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  1  |  0  |  0  |  0   |  0  |  0   |  0   |   --> after shifting --> 64     |  1   |  1  |  1  |  0  |  0   |  0  |  0   |  0   |  after shifting --> 224       16 is reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |
|  1   |  0  |  0  |  0  |  0   |  0  |  0   |  0   |   --> after shifting --> 128
|      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+

__________________________________________________________________________________________________________________________________________________________________________________________________________________

Shift right
-----------
* it is for divition

xor eax , eax
mov al , 128
shr al , 1

value >> number_of_shits = value / ( 2^number_of_shits )

8 >> 2 = 8 / ( 2^2)
       = 8 / 4
       = 2

16 >> 3 = 16 / (2^3)
        = 16 / 8
        = 2


if we we right shift one value , it will get divided by 2 every time.

if all bits are set in a given byte  , then if we shift right a bit  MSB will be cleared.

MSB positional values will be 128 , 64 , 32 , 16 , 8 , 4 , 2 , 1



+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  1   |  0  |  0  |  0  |  0   |  0  |  0   |  0   |  --> before shifting --> 128    |  1   |  1  |  1  |  1  |  1   |  1  |  1   |  1   |   before shifting --> 255
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  1  |  0  |  0  |  0   |  0  |  0   |  0   |  --> after shifting --> 64      |  0   |  1  |  1  |  1  |  1   |  1  |  1   |  1   |  after shifting --> 127  --> 128 reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  1  |  0  |  0   |  0  |  0   |  0   |  --> after shifting --> 32      |  0   |  0  |  1  |  1  |  1   |  1  |  1   |   1  |  after shifting --> 63  --> 64 reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  1  |  0   |  0  |  0   |  0   |  --> after shifting --> 16      |  0   |  0  |  0  |  1  |  1   |  1  |  1   |  1   |  after shifting --> 31  --> 32 reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  0  |  1   |  0  |  0   |  0   |  --> after shifting --> 8       |  0   |  0  |  0  |  0  |  1   |  1  |  1   |  1   |  after shifting --> 15 --> 16 reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  0  |  0   |  1  |  0   |  0   |   --> after shifting --> 4      |  0   |  0  |  0  |  0  |  0   |  1  |  1   |  1   |  after shifting --> 7  --> 8 reduced
|      |     |     |     |      |     |      |      |                                 |      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+                                 +------+-----+-----+-----+------+-----+------+------+

+------+-----+-----+-----+------+-----+------+------+
|      |     |     |     |      |     |      |      |
|  0   |  0  |  0  |  0  |  0   |  0  |  1   |  0   |   --> after shifting --> 2
|      |     |     |     |      |     |      |      |
+------+-----+-----+-----+------+-----+------+------+
__________________________________________________________________________________________________________________________________________________________________________________________________________________

Arithmetic shift
----------------

* Arithmetic shift is used for signed numbers.



Arithmetic left shift
---------------------
* As long as the sign bit is not changed by the shift, the result will be correct.
* it works as same as logical left shift.

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  0  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  --> 42 
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  0  |  1  |  0  |  1  |  0  |  1  |  0  |  0  |  --> 84
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  1  |  0  |  1  |  0  |  1  |  0  |  0  |  0  | --> -88
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  0  |  1  |  0  |  1  |  0  |  0  |  0  |  0  | --> 80
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  1  |  0  |  1  |  0  |  0  |  0  |  0  |  0  | --> -96
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  0  |  1  |  0  |  0  |  0  |  0  |  0  |  0  | --> 64
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  1  |  0  |  0  |  0  |  0  |  0  |  0  |  0  | --> -128
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

as we can see above , the SAL instruction is same as SHL. 

but our shift operation changes the MSB ( sign bit ) our shift operation will have error!
__________________________________________________________________________________________________________________________________________________________________________________________________________________

Arithmetic right shift
----------------------
* Arithmetic right shift works differently than logical right shift
* it keeps the sign bit
* if the MSB is 0 , 0 is added
* if the MSB is 1 , 1 is added

+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
|  1  |  1  |  0  |  1  |  0  |  0  |  0  |  1  | +-> -47                   |  0  |  1  |  0  |  1  |  1  |  0  |  1  |  0  | +-> 90
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
|  1  |  1  |  1  |  0  |  1  |  0  |  0  |  0  | +-> -24                   |  0  |  0  |  1  |  0  |  1  |  1  |  0  |  1  | +-> 45
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
|  1  |  1  |  1  |  1  |  0  |  1  |  0  |  0  | +-> -12                   |  0  |  0  |  0  |  1  |  0  |  1  |  1  |  0  | +-> 22
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
|  1  |  1  |  1  |  1  |  1  |  0  |  1  |  0  | +-> -6                    |  0  |  0  |  0  |  0  |  1  |  0  |  1  |  1  | +-> 11
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
|  1  |  1  |  1  |  1  |  1  |  1  |  0  |  1  | +-> -3                    |  0  |  0  |  0  |  0  |  0  |  1  |  0  |  1  | +-> 5
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  0  | +-> -2                    |  0  |  0  |  0  |  0  |  0  |  0  |  1  |  0  | +-> 2
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  | +-> -1                    |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  | +-> 1
|     |     |     |     |     |     |     |     |                           |     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+                           +-----+-----+-----+-----+-----+-----+-----+-----+
__________________________________________________________________________________________________________________________________________________________________________________________________________________

Rotate shifts
-------------
The rotate shift instructions work like logical shifts except that bits lost off one end of the data are shifted in on the other side. 


MSB --> LSB


Rotate left  - ROL
------------------

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  h  |  g  |  f  |  e  |  d  |  c  |  b  |  a  |  +-------> before rotating left
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  g  |  f  |  e  |  d  |  c  |  b  |  a  |  h  |   +------> after ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  f  |  e  |  d  |  c  |  b  |  a  |  h  |  g  |  +-------> after ROL 1 
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  e  |  d  |  c  |  b  |  a  |  h  |  g  |  f  |  +-------> after ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  d  |  c  |  b  |  a  |  h  |  g  |  f  |  e  |  +------> after ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  c  |  b  |  a  |  h  |  g  |  f  |  e  |  d  |  +------> after ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  b  |  a  |  h  |  g  |  f  |  e  |  d  |  c  |  +--------> after ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+
__________________________________________________________________________________________________________________________________________________________________________________________________________________

Rotate right - ROR
-------------------

LSB --> MSB

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  h  |  g  |  f  |  e  |  d  |  c  |  b  |  a  | +-------> before rotating
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  a  |  h  |  g  |  f  |  e  |  d  |  c  |  b  | +--------> before ROR 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  b  |  a  |  h  |  g  |  f  |  e  |  d  |  c  | +--------> before ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  c  |  b  |  a  |  h  |  g  |  f  |  e  |  d  | +--------> before ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  d  |  c  |  b  |  a  |  h  |  g  |  f  |  e  | +--------> before ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  e  |  d  |  c  |  b  |  a  |  h  |  g  |  f  | +---------> before ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+

+-----+-----+-----+-----+-----+-----+-----+-----+
|     |     |     |     |     |     |     |     |
|  f  |  e  |  d  |  c  |  b  |  a  |  h  |  g  | +---------> before ROL 1
|     |     |     |     |     |     |     |     |
+-----+-----+-----+-----+-----+-----+-----+-----+
______________________________________________________________________________________________________________________________________________________________________________________________________________________

RCL - Rotate Left with carry
----------------------------

       LSB <--- carry <--- MSB
 carry
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+
|      | |     |     |     |     |     |     |     |     |
|  i   | |  h  |  g  |  f  |  e  |  d  |  c  |  b  |  a  |
|      | |     |     |     |     |     |     |     |     |
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+

+------+ +-----+-----+-----+-----+-----+-----+-----+-----+
|      | |     |     |     |     |     |     |     |     |
|  h   | |  g  |  f  |  e  |  d  |  c  |  b  |  a  |  i  |
|      | |     |     |     |     |     |     |     |     |
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+

+------+ +-----+-----+-----+-----+-----+-----+-----+-----+
|      | |     |     |     |     |     |     |     |     |
|   g  | |  f  |  e  |  d  |  c  |  b  |  a  |  i  |  h  |
|      | |     |     |     |     |     |     |     |     |
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+


RCR - Rotate right with carry
----------------------------
	
	LSB --> carry --> MSB		

 carry
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+
|      | |     |     |     |     |     |     |     |     |
|  i   | |  h  |  g  |  f  |  e  |  d  |  c  |  b  |  a  |
|      | |     |     |     |     |     |     |     |     |
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+

+------+ +-----+-----+-----+-----+-----+-----+-----+-----+
|      | |     |     |     |     |     |     |     |     |
|  a   | |  i  |  h  |  g  |  f  |  e  | d   |  c  |  b  |
|      | |     |     |     |     |     |     |     |     |
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+

+------+ +-----+-----+-----+-----+-----+-----+-----+-----+
|      | |     |     |     |     |     |     |     |     |
|  b   | |  a  |  i  |  h  |  g  |  f  |  e  |  d  |  c  |
|      | |     |     |     |     |     |     |     |     |
+------+ +-----+-----+-----+-----+-----+-----+-----+-----+
__________________________________________________________________________________________________________________________________________________________________________________________________________________

AND  -   1 and 1  -> 1
         1 and 0  -> 0
         0 and 1  -> 0
         0 and 0  -> 0

AND can be used to unset a bit

actual_Number AND (number_with_required_bit_off)

1111 OR ( 0111) --> 0111 --> 3rd bit is off
1111 OR ( 1011) --> 1011 --> 2nd bit is off
1111 OR ( 1101) --> 1101 --> 1st bit is off
1111 OR ( 1110) --> 1110 --> 0th bit is off

__________________________

AND can be used to find remainder of divition by 2^i 

we have to and the number by [ (2^1) - 1 ]

129/8 --> remainder is 1

2^i --> i can be any number.

2^4 = 8 

mov eax , 129
mov ebx , 7      ( because we have to give 2^i - 1)
add ebx , eax

1000 0001
0000 0111
---------
0000 0001 --> here it contains 1 
---------
__________________________________________________________

OR  -  1 or 1 -> 1
       1 or 0 -> 1
       0 or 1 -> 1
       0 or 0 -> 0

OR can be uses to set a bit

actual_Number  OR  ( 2^number_of_position_of_the_bit)

1110  OR ( 2^0 ) (0001)  ->  1111 -> 0th bit is set
1101  OR ( 2^1 ) (0010)  ->  1111 -> 1st bit is set
1011  OR ( 2^2 ) (0100)  ->  1111 -> 2nd bit is set
0111  OR ( 2^3 ) (1000)  ->  1111 -> 3rd bit is set
__________________________________________________________

NOT - 1 not -> 0
      0 not -> 1
__________________________________________________________

XOR -  1 xor 1 -> 0
       1 xor 0 -> 1
       0 xor 1 -> 1
       0 xor 0 -> 0

we can complement a particular bit of a number using XOR
we have to  xor the number with (2^i) to complement the bit at the location i 
i = the position of the bit

1111 1111  

if we want to complement the 4 th bit of the above number:  

1111 1111
0001 0000
---------
1110 1111 --> 4th bit is complemented
---------
__________________________________________________________________________________________________________________________________________________________________________________________________________________

